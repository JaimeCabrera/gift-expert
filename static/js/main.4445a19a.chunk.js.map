{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","defaultCategory","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAe7C,OACG,0BAAMC,SARY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,SACZP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAmBM,OACrCL,EAAc,OAKd,2BACGM,KAAK,OACLC,MAAOR,EACPS,SAhBiB,SAACN,GACxBF,EAAcE,EAAEO,OAAOF,YCNhBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtC,OACG,yBAAKC,UAAU,0CACZ,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNAK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdN,EAFc,iDAEkCK,EAFlC,8DAGFE,MAAMP,GAHJ,cAGdQ,EAHc,gBAIGA,EAAIC,OAJP,uBAIZC,EAJY,EAIZA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACJf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAKa,EAAIC,OAAOC,iBAAiBf,QATnB,kBAYbW,GAZa,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACbpB,mBAAS,CAChCyB,KAAM,GACNO,SAAS,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAU,WACPhB,EAAQC,GACJgB,MAAK,SAAAV,GACHQ,EAAS,CACTT,KAAKC,EACLM,SAAQ,SAGd,CAACZ,IAEGa,EDZwBI,CAAajB,GAAhCS,EAH0B,EAG/BJ,KAAaO,EAHkB,EAGlBA,QASpB,OACG,oCACG,wBAAIhB,UAAU,qCAAqCI,GAClDY,GAAW,uBAAGhB,UAAU,oCAAb,eACZ,yBAAKA,UAAU,aAETa,EAAOF,KAAI,SAAAC,GAER,OAAO,kBAAC,EAAD,eACJU,IAAKV,EAAIf,IACLe,UEvBZW,EAAe,SAAC,GAA0B,IAAD,IAAxBC,uBAAwB,MAAR,GAAQ,IAEfxC,mBAASwC,GAFM,mBAE5CC,EAF4C,KAEhC1C,EAFgC,KAWnD,OACG,oCACG,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEM0C,EAAWd,KAAI,SAAAP,GAAQ,OACpB,kBAAC,EAAD,CACGkB,IAAKlB,EACLA,SAAUA,U,YCnB/BsB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.4445a19a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n   const [inputValue, setInputValue] = useState('');\r\n\r\n   const handleInputChange = (e) => {\r\n      setInputValue(e.target.value);\r\n   }\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (inputValue.trim()) {\r\n         setCategories(cats => [inputValue,...cats, ]);\r\n         setInputValue('');//limpiamos el input\r\n      }\r\n   }\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n         /> \r\n      </form>\r\n   )\r\n}\r\nAddCategory.propTypes = {\r\n   setCategories:PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n         <img src={url} alt={title} />\r\n         <p>{title}</p>\r\n      </div>\r\n   )\r\n}\r\nGifGridItem.propTypes = {\r\n   title: PropTypes.string.isRequired,\r\n   url: PropTypes.string.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async (category) => {\r\n   // encode uri para eliminar espcios en las peticiones\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=5&api_key=lTed0SUVO3RxqNimew1FJoDwcw647EpL`;\r\n   const res = await fetch(url);\r\n   const { data } = await res.json();\r\n   const gifs = data.map(img => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images.downsized_medium.url\r\n      }\r\n   });\r\n   return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {GifGridItem} from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n   // para renombrar en la desetructuracion name:newname\r\n   const {data:images, loading} = useFetchGifs(category);\r\n   // const [images, setImages] = useState([]);\r\n\r\n   // useEffect(() => {\r\n   //    getGifs(category).then(gifs => setImages(gifs));\r\n   // }, [category])\r\n\r\n   // recibimos la categoria y buscamos los gifs de esa categoria\r\n   \r\n   return (\r\n      <>\r\n         <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n         {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n         <div className=\"card-grid\">\r\n            {\r\n               images.map(img => {\r\n                  // return <li key={id}>{title}</li>\r\n                  return <GifGridItem\r\n                     key={img.id}\r\n                     {...img}\r\n                  />\r\n               })\r\n            }\r\n\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n   category:PropTypes.string.isRequired\r\n}\r\n\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n   });\r\n\r\n   useEffect(() => {\r\n      getGifs(category)\r\n         .then(gifs => {\r\n            setState({\r\n            data:gifs,\r\n            loading:false\r\n         })\r\n      })\r\n   }, [category])\r\n\r\n   return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ({defaultCategory=[]}) => {\r\n\r\n   const [categories, setCategories] = useState(defaultCategory);\r\n\r\n   // const handleAdd = () => {\r\n   //    // para aÃ±adir nuevos elementos al array usamos el op spreed [...ArrayAnterior,nuevo elemento]\r\n   //    // setCategories([...categories, 'futurama']);\r\n   //    // otra forma utilizando la funcion callback\r\n   //    setCategories(cats =>[...cats,'Futurama']);\r\n\r\n   // }\r\n   return (\r\n      <>\r\n         <h2>Gif Expert App</h2>\r\n         <AddCategory setCategories={setCategories} />\r\n         <hr />\r\n         {/* <button onClick={handleAdd}>Agregar</button> */}\r\n         <ol>\r\n            {\r\n               categories.map(category => (\r\n                  <GifGrid\r\n                     key={category}\r\n                     category={category}\r\n                  />\r\n               ))\r\n            }\r\n         </ol>\r\n      </>\r\n   )\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {GifExpertApp} from './GifExpertApp';\r\nimport 'animate.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}